#ifndef ACCESS_INDEX_H
#define ACCESS_INDEX_H

#include "metadata.h"

class Access_Index
{
	private:
		int width, index_max, avail;

	public:

		Access_Index();

		bool empty();										// check wethere the indexfile is empty or not
		int rtn_avail_list()	{return avail;}		// return the most recent avail_list 
		int rtn_wid()			{return width;}		// return the legnth of one record
		int rtn_inmax()		{return index_max;}	// return the number of data in indexfile


/******************************************************************************************************/
		bool get_info();
/*******************************************************************************************************
*	Input				: N/A
*	Description 	: Read metadata from indexfile and update avail, width, and index_max
*	Output			: whether success or not
*******************************************************************************************************/



/******************************************************************************************************/
		void index_initialize(int, int, int);
/*******************************************************************************************************
*	Input				: RRN, length of one record, and avail_list
*	Description 	: Write metadata with corresponding data
*	Output			: N/A
*******************************************************************************************************/



/******************************************************************************************************/
		int index_rrn(int);
/*******************************************************************************************************
*	Input				: Position of Index
*	Description 	: return the corresponding RRN
*	Output			: RRN
*******************************************************************************************************/



/******************************************************************************************************/
		string index_pkey(int);
/*******************************************************************************************************
*	Input				: Position of Index
*	Description 	: return the corresponding Primary Key
*	Output			: Primary Key
*******************************************************************************************************/



/******************************************************************************************************/
		int avail_check(int);
/*******************************************************************************************************
*	Input				: RRN
*	Description 	: Look up the avail_list from datafile
*	Output			: If the data is marked as delete, return the Avail_list
*						  Otherwise, return -1
*******************************************************************************************************/



/******************************************************************************************************/
		void meta_update(int, int);
/*******************************************************************************************************
*	Input				: # of indexdata, avail_list
*	Description 	: Update #of data and avail_list in Indexfile
*	Output			: N/A
*******************************************************************************************************/



/******************************************************************************************************/
		string index_store_old(int, int);	
/*******************************************************************************************************
*	Input				: start line, end line
*	Description 	: Store the block of data into temporary memory
*						  If the start line is -1, read metadata also.
*	Output			: Block of Data
*******************************************************************************************************/



/******************************************************************************************************/
		void add_index(string, int, int, int);
/*******************************************************************************************************
*	Input				: Primary Key, Position, RRN, and Message flag
*	Description 	: Insert data into index file with shifting data operation.
*	Output			: N/A
*******************************************************************************************************/



/******************************************************************************************************/
		void delete_index(int, int);
/*******************************************************************************************************
*	Input				: Position, Message flag
*	Description 	: Remove indexdata with shifting operation
*	Output			: N/A
*******************************************************************************************************/



/******************************************************************************************************/
		string itoa(int);
/*******************************************************************************************************
*	Input				: any integer
*	Description 	: change integer to the string
*	Output			: string type of input value
*******************************************************************************************************/



};


#endif
